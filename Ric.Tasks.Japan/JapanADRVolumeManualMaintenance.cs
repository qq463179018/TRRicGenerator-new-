using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using HtmlAgilityPack;
using Microsoft.Office.Interop.Excel;
using Ric.Core;
using Ric.Util;

namespace Ric.Tasks.Japan
{
    [ConfigStoredInDB]
    [TypeConverter(typeof(ExpandableObjectConverter))]
    public class JapanADRVolumeManualMaintenanceConfig
    {
        [StoreInDB]
        [Category("FilePath")]
        [Description("NASDAQ Stock Market,JADR1 And New York Stock Exchange ,JADR2 GeneratedExcelPath eg: D:/Japan")]
        public string FilePath { get; set; }
    }
    public class DRExchangeEntity
    {
        public string SYMBOL { get; set; }//SYMBOL +".N"=ADRRIC
        public string RatioFromDRExchange { get; set; }//RatioFromDRExchange?=RatioFromEIKON
    }
    public class EIKONEntity
    {
        public string ADRRIC { get; set; }//SYMBOL +".N"=ADRRIC
        public string DISPLAYNAME { get; set; }
        public string RatioFromEIKON { get; set; }//RatioFromDRExchange?=RatioFromEIKON
        public string RatioFromDRExchange { get; set; }//RatioFromDRExchange?=RatioFromEIKON
    }
    class JapanADRVolumeManualMaintenance : GeneratorBase
    {
        private string fileName;
        private string websiteUrl;
        private string parametersToWebsite;
        private string parametersToEIKON;
        private string filePath ;
        List<DRExchangeEntity> listDRNASDAQ = new List<DRExchangeEntity>();
        List<DRExchangeEntity> listDRNewYork = new List<DRExchangeEntity>();
        List<EIKONEntity> listEIKONJADR1 = new List<EIKONEntity>();
        List<EIKONEntity> listEIKONJADR2 = new List<EIKONEntity>();
        private JapanADRVolumeManualMaintenanceConfig configObj;
        protected override void Initialize()
        {
            base.Initialize();
            configObj = Config as JapanADRVolumeManualMaintenanceConfig;
        }
        protected override void Start()
        {
            websiteUrl = @"http://www.adrbnymellon.com/dr_directory.jsp";
            parametersToWebsite = "NASDAQ Stock Market,New York Stock Exchange";
            parametersToEIKON = "JADR1,JADR2";
            filePath = configObj.FilePath.Trim();
            GenerateListEntity();
            GenerateNewExcel(filePath, listDRNASDAQ, listEIKONJADR2, "NASDAQ");
            GenerateNewExcel(filePath, listDRNewYork, listEIKONJADR1, "NewYork");
        }
        /// <summary>
        /// generate Entity function
        /// </summary>
        private void GenerateListEntity()
        {
            try
            {
                string startofnext;
                string[] parWebsite = parametersToWebsite.Split(',');
                string[] parEIKON = parametersToEIKON.Split(',');
                if ((parWebsite.Length == parEIKON.Length) && !string.IsNullOrEmpty(websiteUrl) && !string.IsNullOrEmpty(parametersToWebsite) && !string.IsNullOrEmpty(parametersToEIKON) && !string.IsNullOrEmpty(filePath))
                {
                    for (int i = 0; i < parWebsite.Length; i++)
                    {
                        if (parWebsite[i].Equals("NASDAQ Stock Market"))
                        {
                            parWebsite[i] = "NAS";
                            startofnext = "15";
                            GetDataFromWebsiteUrlToDRExchangeEntity(startofnext, parWebsite[i], listDRNASDAQ);
                        }
                        else if (parWebsite[i].Equals("New York Stock Exchange"))
                        {
                            parWebsite[i] = "NYS";
                            startofnext = "2";
                            GetDataFromWebsiteUrlToDRExchangeEntity(startofnext, parWebsite[i], listDRNewYork);
                        }
                        else
                        {
                            Logger.Log(string.Format("Error found during task: {0}}", "Error generated by config information of parametersToWebsite"));
                        }
                    }
                    foreach (string entity in parEIKON)
                    {
                        if (entity.Equals("JADR1"))
                        {
                            GetDataFromEIKONToEIKONEntity(entity, listEIKONJADR1);
                        }
                        else if (entity.Equals("JADR2"))
                        {
                            GetDataFromEIKONToEIKONEntity(entity, listEIKONJADR2);
                        }
                        else
                        {
                            Logger.Log(string.Format("Error found during task: {0}}", "Error generated by config information of parametersToWebsite"));
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.Log(string.Format("Error found during task: {0}. Exception message: {1}", "Error generated by config information", ex.Message));
            }
        }
        /// <summary>
        /// GetDataFromWebsiteUrlToDRExchangeEntity
        /// </summary>
        /// <param name="startofnext">send request param1</param>
        /// <param name="parmUrl">send request param2</param>
        /// <param name="listDR">store DRExchange</param>
        private void GetDataFromWebsiteUrlToDRExchangeEntity(string startofnext, string parmUrl, List<DRExchangeEntity> listDR)
        {
            string uri = string.Format("http://www.adrbnymellon.com/dr_directory.jsp");
            string postDataStr = string.Format("xls=&start=0&startLetter=&startofpage=&startofnext={0}&startofprev=0&region=&country=JP&industry=&exchange={1}&depositary=&dateRange=&category=&capitalraised=&searchType=1&searchText", startofnext, parmUrl);
            try
            {
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(uri);
                request.CookieContainer = new CookieContainer();
                CookieContainer cookie = request.CookieContainer;
                request.Referer = "http://www.adrbnymellon.com/dr_directory.jsp";
                request.Accept = "Accept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8";
                request.Headers["Accept-Language"] = "zh-CN,zh;q=0.";
                request.Headers["Accept-Charset"] = "GBK,utf-8;q=0.7,*;q=0.3";
                request.UserAgent = "User-Agent:Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.835.202 Safari/535.1";
                request.KeepAlive = true;
                request.ContentType = "application/x-www-form-urlencoded";
                request.Method = "POST";
                Encoding encoding = Encoding.UTF8;
                byte[] postData = encoding.GetBytes(postDataStr);
                request.ContentLength = postData.Length;
                Stream requestStream = request.GetRequestStream();
                requestStream.Write(postData, 0, postData.Length);
                HttpWebResponse response = (HttpWebResponse)request.GetResponse();
                Stream responseStream = response.GetResponseStream();
                if (response.Headers["Content-Encoding"] != null && response.Headers["Content-Encoding"].ToLower().Contains("gzip"))
                {
                    responseStream = new GZipStream(responseStream, CompressionMode.Decompress);
                }
                StreamReader streamReader = new StreamReader(responseStream, encoding);
                HtmlDocument htmlDoc = new HtmlDocument();
                htmlDoc.Load(streamReader);
                HtmlNodeCollection tables = htmlDoc.DocumentNode.SelectNodes(".//table");
                HtmlNode table = tables[4];
                HtmlNodeCollection trs = table.SelectNodes(".//tr");
                DRExchangeEntity dr = null;
                for (int i = 1; i < trs.Count; i++)
                {
                    dr = new DRExchangeEntity();
                    dr.SYMBOL = trs[i].SelectNodes(".//td")[1].InnerText;
                    dr.RatioFromDRExchange = trs[i].SelectNodes(".//td")[6].InnerText.Replace("\t", "").Replace("\r", "").Replace("\n", "").Trim();
                    listDR.Add(dr);
                }
                streamReader.Close();
                responseStream.Close();
            }
            catch (Exception ex)
            {
                Logger.Log(string.Format("Error found during task: {0}. Exception message: {1}", "Error generated by GetDataFromWebsiteUrlToDRExchangeEntity", ex.Message));
            }
        }
        /// <summary>
        /// GetDataFromEIKONToEIKONEntity
        /// </summary>
        /// <param name="par">GATS param</param>
        /// <param name="listEIKON"></param>
        private void GetDataFromEIKONToEIKONEntity(string par, List<EIKONEntity> listEIKON)
        {
            try
            {
                GatsUtil gats = new GatsUtil();
                string response = gats.GetGatsResponse(par, null);
                const string startStr = "ROW80_3";
                response = response.Substring(response.IndexOf(startStr));
                const string pattern = "ROW80_.*?&lt;(?<RIC>[A-Z.]+)&gt; +(?<DisplayName>[A-Z0-9-.& ]+) +.*?(?<Ratio>\\d+:\\d+).*?\\r\\n";
                Regex regex = new Regex(pattern);
                MatchCollection matches = regex.Matches(response);
                foreach (Match match in matches)
                {
                    EIKONEntity ei = new EIKONEntity();
                    string tmpRIC = match.Groups["RIC"].Value;
                    ei.ADRRIC = tmpRIC.Substring(0, tmpRIC.IndexOf("."));
                    string tmpDis = match.Groups["DisplayName"].Value;
                    ei.DISPLAYNAME = tmpDis.Substring(0, tmpDis.IndexOf("  "));
                    ei.RatioFromEIKON = match.Groups["Ratio"].Value;
                    listEIKON.Add(ei);
                }
            }
            catch (Exception ex)
            {
                Logger.Log(string.Format("Error found during task: {0}. Exception message: {1}", "Error generated by GetDataFromEIKONToEIKONEntity", ex.Message));
            }
        }
        /// <summary>
        /// GenerateNewExcel
        /// </summary>
        /// <param name="filePath">Path</param>
        /// <param name="listDR">DRExchangeEntity</param>
        /// <param name="listEIKON">EIKONEntity</param>
        /// <param name="name">Exchange's name</param>
        private void GenerateNewExcel(string filePath, IEnumerable<DRExchangeEntity> listDR, List<EIKONEntity> listEIKON, string name)
        {
            fileName = filePath + "\\" + DateTime.Now.ToString("dd-MM-yyyy") + "-" + name + ".xls";
            try
            {
                if (!Directory.Exists(Path.GetDirectoryName(fileName)))
                {
                    Directory.CreateDirectory(Path.GetDirectoryName(fileName));
                }
                ExcelApp app = new ExcelApp(false, false);
                Workbook workbook = ExcelUtil.CreateOrOpenExcelFile(app, fileName);
                Worksheet worksheet = workbook.Worksheets[1] as Worksheet;
                ((Range)worksheet.Rows[1, Type.Missing]).Font.Bold = System.Drawing.FontStyle.Bold;
                worksheet.Cells[1, 1] = "ADRRIC";
                worksheet.Cells[1, 2] = "DISPLAY_NAME";
                worksheet.Cells[1, 3] = "RatioEIKON";
                worksheet.Cells[1, 4] = "RatioDR";
                int startline = 2;
                foreach (var itemDR in listDR)
                {
                    foreach (var itemEI in listEIKON.Where(itemEI => itemDR.SYMBOL.Trim() == itemEI.ADRRIC.Trim()))
                    {
                        worksheet.Cells[startline, 1] = itemEI.ADRRIC;
                        worksheet.Cells[startline, 2] = itemEI.DISPLAYNAME;
                        worksheet.Cells[startline, 3] = " " + itemEI.RatioFromEIKON;
                        worksheet.Cells[startline, 4] = " " + itemDR.RatioFromDRExchange;
                        if (itemEI.RatioFromEIKON.Trim() != itemDR.RatioFromDRExchange.Trim())
                        {
                            ExcelUtil.GetRange(startline, 3, worksheet).Interior.Color = System.Drawing.Color.FromArgb(0, 200, 0).ToArgb();
                            ExcelUtil.GetRange(startline, 4, worksheet).Interior.Color = System.Drawing.Color.FromArgb(0, 200, 0).ToArgb();
                        }
                        startline++;
                    }
                }
                app.ExcelAppInstance.AlertBeforeOverwriting = false;
                workbook.Save();
                workbook.Close();
                app.Dispose();
            }
            catch (Exception ex)
            {
                Logger.Log(string.Format("Error found during task: {0}. Exception message: {1}", "Error generated by GenerateNewExcel", ex.Message));
            }
        }
    }
}
