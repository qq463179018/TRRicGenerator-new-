// Implementation file for parser generated by fsyacc
module Finance.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"

 open Finance.Ast
 
# 10 "J:\8.19(new ui staging)\Ric.Parser\Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | LPAREN
  | RPAREN
  | LSCOPE
  | RSCOPE
  | LBRACKET
  | RBRACKET
  | IF
  | THEN
  | ELSE
  | EOF
  | PERCENT
  | COMMA
  | FORMAT
  | EQUALS
  | STARTSWITH
  | ENDSWITH
  | LENGTH
  | OR
  | AND
  | FLOAT of (System.Double)
  | INT of (System.Int32)
  | VAL of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LSCOPE
    | TOKEN_RSCOPE
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_EOF
    | TOKEN_PERCENT
    | TOKEN_COMMA
    | TOKEN_FORMAT
    | TOKEN_EQUALS
    | TOKEN_STARTSWITH
    | TOKEN_ENDSWITH
    | TOKEN_LENGTH
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_VAL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_ParsedLine
    | NONTERM_Expr
    | NONTERM_ExprList

// This function maps tokens to integers indexes
let tagOfToken (t:token) = 
  match t with
  | LPAREN  -> 0 
  | RPAREN  -> 1 
  | LSCOPE  -> 2 
  | RSCOPE  -> 3 
  | LBRACKET  -> 4 
  | RBRACKET  -> 5 
  | IF  -> 6 
  | THEN  -> 7 
  | ELSE  -> 8 
  | EOF  -> 9 
  | PERCENT  -> 10 
  | COMMA  -> 11 
  | FORMAT  -> 12 
  | EQUALS  -> 13 
  | STARTSWITH  -> 14 
  | ENDSWITH  -> 15 
  | LENGTH  -> 16 
  | OR  -> 17 
  | AND  -> 18 
  | FLOAT _ -> 19 
  | INT _ -> 20 
  | VAL _ -> 21 

// This function maps integers indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_LPAREN 
  | 1 -> TOKEN_RPAREN 
  | 2 -> TOKEN_LSCOPE 
  | 3 -> TOKEN_RSCOPE 
  | 4 -> TOKEN_LBRACKET 
  | 5 -> TOKEN_RBRACKET 
  | 6 -> TOKEN_IF 
  | 7 -> TOKEN_THEN 
  | 8 -> TOKEN_ELSE 
  | 9 -> TOKEN_EOF 
  | 10 -> TOKEN_PERCENT 
  | 11 -> TOKEN_COMMA 
  | 12 -> TOKEN_FORMAT 
  | 13 -> TOKEN_EQUALS 
  | 14 -> TOKEN_STARTSWITH 
  | 15 -> TOKEN_ENDSWITH 
  | 16 -> TOKEN_LENGTH 
  | 17 -> TOKEN_OR 
  | 18 -> TOKEN_AND 
  | 19 -> TOKEN_FLOAT 
  | 20 -> TOKEN_INT 
  | 21 -> TOKEN_VAL 
  | 24 -> TOKEN_end_of_input
  | 22 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_ParsedLine 
    | 3 -> NONTERM_Expr 
    | 4 -> NONTERM_Expr 
    | 5 -> NONTERM_Expr 
    | 6 -> NONTERM_Expr 
    | 7 -> NONTERM_Expr 
    | 8 -> NONTERM_Expr 
    | 9 -> NONTERM_Expr 
    | 10 -> NONTERM_Expr 
    | 11 -> NONTERM_Expr 
    | 12 -> NONTERM_Expr 
    | 13 -> NONTERM_Expr 
    | 14 -> NONTERM_Expr 
    | 15 -> NONTERM_Expr 
    | 16 -> NONTERM_Expr 
    | 17 -> NONTERM_Expr 
    | 18 -> NONTERM_Expr 
    | 19 -> NONTERM_Expr 
    | 20 -> NONTERM_Expr 
    | 21 -> NONTERM_Expr 
    | 22 -> NONTERM_Expr 
    | 23 -> NONTERM_ExprList 
    | 24 -> NONTERM_ExprList 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 24 
let _fsyacc_tagOfErrorTerminal = 22

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LSCOPE  -> "LSCOPE" 
  | RSCOPE  -> "RSCOPE" 
  | LBRACKET  -> "LBRACKET" 
  | RBRACKET  -> "RBRACKET" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | EOF  -> "EOF" 
  | PERCENT  -> "PERCENT" 
  | COMMA  -> "COMMA" 
  | FORMAT  -> "FORMAT" 
  | EQUALS  -> "EQUALS" 
  | STARTSWITH  -> "STARTSWITH" 
  | ENDSWITH  -> "ENDSWITH" 
  | LENGTH  -> "LENGTH" 
  | OR  -> "OR" 
  | AND  -> "AND" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 
  | VAL _ -> "VAL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LSCOPE  -> (null : System.Object) 
  | RSCOPE  -> (null : System.Object) 
  | LBRACKET  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | PERCENT  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | FORMAT  -> (null : System.Object) 
  | EQUALS  -> (null : System.Object) 
  | STARTSWITH  -> (null : System.Object) 
  | ENDSWITH  -> (null : System.Object) 
  | LENGTH  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | VAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 29us; 65535us; 0us; 21us; 3us; 22us; 8us; 20us; 9us; 20us; 10us; 20us; 11us; 20us; 12us; 20us; 13us; 20us; 14us; 20us; 15us; 20us; 16us; 20us; 17us; 20us; 18us; 20us; 19us; 20us; 20us; 20us; 21us; 20us; 22us; 20us; 27us; 8us; 30us; 9us; 32us; 10us; 34us; 11us; 35us; 12us; 36us; 13us; 37us; 14us; 38us; 15us; 40us; 16us; 43us; 17us; 46us; 18us; 49us; 19us; 1us; 65535us; 0us; 3us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 35us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 2us; 2us; 24us; 1us; 3us; 2us; 3us; 22us; 1us; 4us; 1us; 5us; 12us; 6us; 7us; 8us; 9us; 11us; 12us; 15us; 16us; 17us; 18us; 21us; 22us; 11us; 6us; 7us; 8us; 11us; 12us; 15us; 16us; 17us; 18us; 21us; 22us; 11us; 6us; 7us; 10us; 11us; 12us; 15us; 16us; 17us; 18us; 21us; 22us; 11us; 6us; 7us; 11us; 11us; 12us; 15us; 16us; 17us; 18us; 21us; 22us; 11us; 6us; 7us; 11us; 12us; 12us; 15us; 16us; 17us; 18us; 21us; 22us; 12us; 6us; 7us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 21us; 22us; 12us; 6us; 7us; 11us; 12us; 13us; 14us; 15us; 16us; 17us; 18us; 21us; 22us; 11us; 6us; 7us; 11us; 12us; 14us; 15us; 16us; 17us; 18us; 21us; 22us; 11us; 6us; 7us; 11us; 12us; 15us; 15us; 16us; 17us; 18us; 21us; 22us; 11us; 6us; 7us; 11us; 12us; 15us; 16us; 16us; 17us; 18us; 21us; 22us; 11us; 6us; 7us; 11us; 12us; 15us; 16us; 17us; 17us; 18us; 21us; 22us; 11us; 6us; 7us; 11us; 12us; 15us; 16us; 17us; 18us; 18us; 21us; 22us; 11us; 6us; 7us; 11us; 12us; 15us; 16us; 17us; 18us; 21us; 21us; 22us; 11us; 6us; 7us; 11us; 12us; 15us; 16us; 17us; 18us; 21us; 22us; 23us; 11us; 6us; 7us; 11us; 12us; 15us; 16us; 17us; 18us; 21us; 22us; 24us; 3us; 6us; 7us; 19us; 2us; 6us; 7us; 1us; 7us; 1us; 7us; 2us; 8us; 9us; 2us; 8us; 9us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 12us; 2us; 13us; 14us; 2us; 13us; 14us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 20us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 9us; 11us; 14us; 16us; 18us; 31us; 43us; 55us; 67us; 79us; 92us; 105us; 117us; 129us; 141us; 153us; 165us; 177us; 189us; 201us; 205us; 208us; 210us; 212us; 215us; 218us; 220us; 222us; 224us; 226us; 228us; 230us; 232us; 235us; 238us; 240us; 242us; 244us; 246us; 248us; 250us; 252us; 254us; 256us; 258us; 260us; 262us; 264us; 266us; |]
let _fsyacc_action_rows = 53
let _fsyacc_actionTableElements = [|8us; 32768us; 2us; 27us; 4us; 32us; 6us; 36us; 10us; 51us; 11us; 52us; 19us; 7us; 20us; 6us; 21us; 4us; 0us; 49152us; 0us; 16385us; 8us; 16386us; 2us; 27us; 4us; 32us; 6us; 36us; 10us; 51us; 11us; 52us; 19us; 7us; 20us; 6us; 21us; 4us; 0us; 16387us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 15us; 32768us; 2us; 27us; 3us; 28us; 4us; 32us; 6us; 36us; 10us; 23us; 11us; 52us; 13us; 39us; 14us; 48us; 15us; 45us; 16us; 42us; 17us; 34us; 18us; 35us; 19us; 7us; 20us; 6us; 21us; 5us; 15us; 32768us; 1us; 31us; 2us; 27us; 4us; 32us; 6us; 36us; 10us; 23us; 11us; 52us; 13us; 39us; 14us; 48us; 15us; 45us; 16us; 42us; 17us; 34us; 18us; 35us; 19us; 7us; 20us; 6us; 21us; 5us; 15us; 32768us; 2us; 27us; 4us; 32us; 5us; 33us; 6us; 36us; 10us; 23us; 11us; 52us; 13us; 39us; 14us; 48us; 15us; 45us; 16us; 42us; 17us; 34us; 18us; 35us; 19us; 7us; 20us; 6us; 21us; 5us; 14us; 16395us; 2us; 27us; 4us; 32us; 6us; 36us; 10us; 23us; 11us; 52us; 13us; 39us; 14us; 48us; 15us; 45us; 16us; 42us; 17us; 34us; 18us; 35us; 19us; 7us; 20us; 6us; 21us; 5us; 14us; 16396us; 2us; 27us; 4us; 32us; 6us; 36us; 10us; 23us; 11us; 52us; 13us; 39us; 14us; 48us; 15us; 45us; 16us; 42us; 17us; 34us; 18us; 35us; 19us; 7us; 20us; 6us; 21us; 5us; 15us; 32768us; 2us; 27us; 4us; 32us; 6us; 36us; 7us; 37us; 10us; 23us; 11us; 52us; 13us; 39us; 14us; 48us; 15us; 45us; 16us; 42us; 17us; 34us; 18us; 35us; 19us; 7us; 20us; 6us; 21us; 5us; 15us; 16397us; 2us; 27us; 4us; 32us; 6us; 36us; 8us; 38us; 10us; 23us; 11us; 52us; 13us; 39us; 14us; 48us; 15us; 45us; 16us; 42us; 17us; 34us; 18us; 35us; 19us; 7us; 20us; 6us; 21us; 5us; 14us; 16398us; 2us; 27us; 4us; 32us; 6us; 36us; 10us; 23us; 11us; 52us; 13us; 39us; 14us; 48us; 15us; 45us; 16us; 42us; 17us; 34us; 18us; 35us; 19us; 7us; 20us; 6us; 21us; 5us; 15us; 32768us; 1us; 41us; 2us; 27us; 4us; 32us; 6us; 36us; 10us; 23us; 11us; 52us; 13us; 39us; 14us; 48us; 15us; 45us; 16us; 42us; 17us; 34us; 18us; 35us; 19us; 7us; 20us; 6us; 21us; 5us; 15us; 32768us; 1us; 44us; 2us; 27us; 4us; 32us; 6us; 36us; 10us; 23us; 11us; 52us; 13us; 39us; 14us; 48us; 15us; 45us; 16us; 42us; 17us; 34us; 18us; 35us; 19us; 7us; 20us; 6us; 21us; 5us; 15us; 32768us; 1us; 47us; 2us; 27us; 4us; 32us; 6us; 36us; 10us; 23us; 11us; 52us; 13us; 39us; 14us; 48us; 15us; 45us; 16us; 42us; 17us; 34us; 18us; 35us; 19us; 7us; 20us; 6us; 21us; 5us; 15us; 32768us; 1us; 50us; 2us; 27us; 4us; 32us; 6us; 36us; 10us; 23us; 11us; 52us; 13us; 39us; 14us; 48us; 15us; 45us; 16us; 42us; 17us; 34us; 18us; 35us; 19us; 7us; 20us; 6us; 21us; 5us; 14us; 16405us; 2us; 27us; 4us; 32us; 6us; 36us; 10us; 23us; 11us; 52us; 13us; 39us; 14us; 48us; 15us; 45us; 16us; 42us; 17us; 34us; 18us; 35us; 19us; 7us; 20us; 6us; 21us; 5us; 14us; 16407us; 2us; 27us; 4us; 32us; 6us; 36us; 10us; 23us; 11us; 52us; 13us; 39us; 14us; 48us; 15us; 45us; 16us; 42us; 17us; 34us; 18us; 35us; 19us; 7us; 20us; 6us; 21us; 5us; 14us; 16408us; 2us; 27us; 4us; 32us; 6us; 36us; 10us; 23us; 11us; 52us; 13us; 39us; 14us; 48us; 15us; 45us; 16us; 42us; 17us; 34us; 18us; 35us; 19us; 7us; 20us; 6us; 21us; 5us; 1us; 16403us; 20us; 24us; 1us; 16390us; 11us; 25us; 1us; 32768us; 20us; 26us; 0us; 16391us; 8us; 32768us; 2us; 27us; 4us; 32us; 6us; 36us; 10us; 51us; 11us; 52us; 19us; 7us; 20us; 6us; 21us; 4us; 1us; 16393us; 12us; 29us; 1us; 32768us; 0us; 30us; 8us; 32768us; 2us; 27us; 4us; 32us; 6us; 36us; 10us; 51us; 11us; 52us; 19us; 7us; 20us; 6us; 21us; 4us; 0us; 16392us; 8us; 32768us; 2us; 27us; 4us; 32us; 6us; 36us; 10us; 51us; 11us; 52us; 19us; 7us; 20us; 6us; 21us; 4us; 0us; 16394us; 8us; 32768us; 2us; 27us; 4us; 32us; 6us; 36us; 10us; 51us; 11us; 52us; 19us; 7us; 20us; 6us; 21us; 4us; 8us; 32768us; 2us; 27us; 4us; 32us; 6us; 36us; 10us; 51us; 11us; 52us; 19us; 7us; 20us; 6us; 21us; 4us; 8us; 32768us; 2us; 27us; 4us; 32us; 6us; 36us; 10us; 51us; 11us; 52us; 19us; 7us; 20us; 6us; 21us; 4us; 8us; 32768us; 2us; 27us; 4us; 32us; 6us; 36us; 10us; 51us; 11us; 52us; 19us; 7us; 20us; 6us; 21us; 4us; 8us; 32768us; 2us; 27us; 4us; 32us; 6us; 36us; 10us; 51us; 11us; 52us; 19us; 7us; 20us; 6us; 21us; 4us; 1us; 32768us; 0us; 40us; 8us; 32768us; 2us; 27us; 4us; 32us; 6us; 36us; 10us; 51us; 11us; 52us; 19us; 7us; 20us; 6us; 21us; 4us; 0us; 16399us; 1us; 32768us; 0us; 43us; 8us; 32768us; 2us; 27us; 4us; 32us; 6us; 36us; 10us; 51us; 11us; 52us; 19us; 7us; 20us; 6us; 21us; 4us; 0us; 16400us; 1us; 32768us; 0us; 46us; 8us; 32768us; 2us; 27us; 4us; 32us; 6us; 36us; 10us; 51us; 11us; 52us; 19us; 7us; 20us; 6us; 21us; 4us; 0us; 16401us; 1us; 32768us; 0us; 49us; 8us; 32768us; 2us; 27us; 4us; 32us; 6us; 36us; 10us; 51us; 11us; 52us; 19us; 7us; 20us; 6us; 21us; 4us; 0us; 16402us; 0us; 16403us; 0us; 16404us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 9us; 10us; 11us; 20us; 21us; 22us; 23us; 24us; 40us; 56us; 72us; 87us; 102us; 118us; 134us; 149us; 165us; 181us; 197us; 213us; 228us; 243us; 258us; 260us; 262us; 264us; 265us; 274us; 276us; 278us; 287us; 288us; 297us; 298us; 307us; 316us; 325us; 334us; 343us; 345us; 354us; 355us; 357us; 366us; 367us; 369us; 378us; 379us; 381us; 390us; 391us; 392us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 1us; 1us; 1us; 3us; 5us; 7us; 3us; 3us; 3us; 3us; 4us; 6us; 5us; 5us; 5us; 5us; 1us; 1us; 2us; 2us; 1us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 65535us; 16387us; 65535us; 16388us; 16389us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 65535us; 16392us; 65535us; 16394us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16399us; 65535us; 65535us; 16400us; 65535us; 65535us; 16401us; 65535us; 65535us; 16402us; 16403us; 16404us; |]
let _fsyacc_reductions ()  =    [| 
# 219 "J:\8.19(new ui staging)\Ric.Parser\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  Finance.Ast.ParsedLine )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 228 "J:\8.19(new ui staging)\Ric.Parser\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ParsedLine)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 18 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                                          _1 
                   )
# 18 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                 :  Finance.Ast.ParsedLine ));
# 239 "J:\8.19(new ui staging)\Ric.Parser\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 20 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                                             ParsedLine(_1) 
                   )
# 20 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                 : 'ParsedLine));
# 250 "J:\8.19(new ui staging)\Ric.Parser\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 23 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                                        Val(_1) 
                   )
# 23 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                 : 'Expr));
# 261 "J:\8.19(new ui staging)\Ric.Parser\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 24 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                                     Int(_1) 
                   )
# 24 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                 : 'Expr));
# 272 "J:\8.19(new ui staging)\Ric.Parser\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Double)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                                      Float(_1) 
                   )
# 25 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                 : 'Expr));
# 283 "J:\8.19(new ui staging)\Ric.Parser\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 26 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                                               SubVal(_1, 0, _3) 
                   )
# 26 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                 : 'Expr));
# 295 "J:\8.19(new ui staging)\Ric.Parser\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                                                      SubVal(_1, _3 - 1, _5 - _3 + 1) 
                   )
# 27 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                 : 'Expr));
# 308 "J:\8.19(new ui staging)\Ric.Parser\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 28 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                                                                        VarDate(_2, _6) 
                   )
# 28 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                 : 'Expr));
# 320 "J:\8.19(new ui staging)\Ric.Parser\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 29 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                                                Var(_2) 
                   )
# 29 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                 : 'Expr));
# 331 "J:\8.19(new ui staging)\Ric.Parser\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                                                   Parent(_2) 
                   )
# 30 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                 : 'Expr));
# 342 "J:\8.19(new ui staging)\Ric.Parser\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                                            Or(_1, _3) 
                   )
# 31 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                 : 'Expr));
# 354 "J:\8.19(new ui staging)\Ric.Parser\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                                            And(_1, _3) 
                   )
# 32 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                 : 'Expr));
# 366 "J:\8.19(new ui staging)\Ric.Parser\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                                               IfThen(_2,_4) 
                   )
# 33 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                 : 'Expr));
# 378 "J:\8.19(new ui staging)\Ric.Parser\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                                                       IfThenElse(_2,_4,_6) 
                   )
# 34 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                 : 'Expr));
# 391 "J:\8.19(new ui staging)\Ric.Parser\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                                                          Function("Equals", _1, _4) 
                   )
# 35 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                 : 'Expr));
# 403 "J:\8.19(new ui staging)\Ric.Parser\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                                                          Function("Length", _1, _4) 
                   )
# 36 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                 : 'Expr));
# 415 "J:\8.19(new ui staging)\Ric.Parser\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                                                            Function("Endswith", _1, _4) 
                   )
# 37 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                 : 'Expr));
# 427 "J:\8.19(new ui staging)\Ric.Parser\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                                                              Function("Startswith", _1, _4) 
                   )
# 38 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                 : 'Expr));
# 439 "J:\8.19(new ui staging)\Ric.Parser\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                                        Val("%") 
                   )
# 39 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                 : 'Expr));
# 449 "J:\8.19(new ui staging)\Ric.Parser\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                                      Val(",") 
                   )
# 40 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                 : 'Expr));
# 459 "J:\8.19(new ui staging)\Ric.Parser\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                                         Concat(_1, _2) 
                   )
# 41 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                 : 'Expr));
# 471 "J:\8.19(new ui staging)\Ric.Parser\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                                         Concat(_1, Val(_2)) 
                   )
# 42 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                 : 'Expr));
# 483 "J:\8.19(new ui staging)\Ric.Parser\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                                      [_1] 
                   )
# 44 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                 : 'ExprList));
# 494 "J:\8.19(new ui staging)\Ric.Parser\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'ExprList)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                                         _2 :: _1  
                   )
# 45 "J:\8.19(new ui staging)\Ric.Parser\Parser.fsy"
                 : 'ExprList));
|]
# 507 "J:\8.19(new ui staging)\Ric.Parser\Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 25;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  Finance.Ast.ParsedLine  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
