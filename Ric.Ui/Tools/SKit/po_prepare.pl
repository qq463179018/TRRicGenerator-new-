####################################################
# SKit: Phaseover TickRelate Configuration Generator
#
# Simon Chudley (2006)

# Version
my $l_version = "1.1.6.0";

# Setup
my %l_config = ();
my $root = $ENV{"SKitRoot"};
my $l_qnum = 1;
my $l_header = "# Auto generated by SKit po_prepare (v".$l_version.") - Simon Chudley: 2007\n\n";
print "po_prepare v".$l_version.": Developed by S. Chudley\n";
if ($ARGV[0] eq "-version") { exit(0); }
print "\nSKit TickRelate Phaseover Configuration Generator\n";
print "-------------------------------------------------\n\n";

# Get options
sub ask_question
{
   my $l_q = shift;
   my $l_r = "";
   my $l_num = $l_qnum++;
   do
   {
      print "  ".$l_num.". ".$l_q."? : ";
      chomp($l_r = <STDIN>);
   } while ($l_r eq "");

   print "\n";
   return $l_r;
}

# Already got config?
my $l_conf = 0;
if (-f "validation.cfg")
{
   print "WARNING: A 'validation.cfg' already exists in this directory. \n         Do you wish to re-use the settings from this file? ";
   chomp($l_r = <STDIN>);
   if ($l_r =~ m/^y/i)
   {
      open(INF, "validation.cfg");
      while (<INF>)
         { if ($_ =~ m/\s*(.+)\s*=\s*(.*)\s*$/) { $l_config{$1} = $2; } }
      close(INF);
      $l_conf = 1;
   }
   else { print "\n"; }
}

# If not yet configured
if ($l_conf == 0)
{
   # Data feeds 
   print "Please answer the following questions:\n\n";
   $l_config{"feed"} = uc(&ask_question("What is the feed name")); 
   my $l_src_h = lc(&ask_question("What is the primary data feed (eg. IDN or QDN)")); 
   my $l_dst_h = lc(&ask_question("What is the secondary data feed (eg. IDN or QDN)")); 
   $l_config{"hosts"} = $l_src_h."_vs_".$l_dst_h.".cfg";
   $l_config{"primary"} = $l_src_h;
   $l_config{"secondary"} = $l_dst_h;
   if (! -f $root."/etc/".$l_config{"hosts"})
   {
      print "ERROR: Unable to validate between ".uc($l_src_h)." and ".uc($l_dst_h)."!\n";
      print "       Ensure the configuration file ".$l_config{"hosts"}." has been defined in '".$root."\\etc'\n";
      exit(1);
   }

   # Other options
   $l_config{"mangle"} = &ask_question("What RIC mangling prefix character is in use on the secondary feed (- for none)");
   if ($l_config{"mangle"} eq "-") { $l_config{"mangle"} = ""; }
   $l_config{"efids"} = uc(&ask_question("What FIDs do you want exclude from ALL comparisons (- for none)"));
   if ($l_config{"efids"} eq "-") { $l_config{"efids"} = ""; }
   $l_efids =~ s/\s//g;
   $l_config{"compare"} = &ask_question("What comparison type do you wish to perform (sel_fids|com_fids|all_fids, - for default)");
   if ($l_config{"compare"} eq "-") { $l_config{"compare"} = "sel_fids"; }
   $l_config{"format"} = &ask_question("What format do you want the log files in (xml|csv|normal, - for xml default)");
   if ($l_config{"format"} eq "-") { $l_config{"format"} = "xml"; }
   $l_config{"stats_freq"} = &ask_question("How often do you wish to generate validation reports (secs, - for no statistics)");
   $l_config{"upd_hist"} = &ask_question("How many updates do you want to maintain in the RIC update history (count|xx ms, - for none)");
   $l_config{"sync_ctx"} = &ask_question("How many updates leading up to a RIC pair going into sync do you want to log (count|xx ms, - for none)");
   $l_config{"drop_sync_ctx"} = &ask_question("How many updates leading up to a RIC pair dropping out of sync do you want to log (count|xx ms, - for none)");
   $l_config{"missed_updates"} = &ask_question("Do you want to enable tracking of missed updates");
   if ($l_config{"missed_updates"} =~ /y/i) 
   {
      $l_config{"missed_updates_ctx"} = &ask_question("How many updates leading up to a missed update being detected do you want to log (count|xx ms, - for none)");
   }
   else { $l_config{"missed_updates"} = ""; }
   $l_config{"gui"} = &ask_question("Do you want to run TickRelate with the GUI enabled");
   if (lc($l_config{"gui"}) !~ m/^"n"/) { $l_config{"gui"} = "y"; } else { $l_config{"gui"} = "n"; }
   $l_config{"rst_fid_cache"} = &ask_question("Do you want to use a restricted FID cache (saves memory)");
   if (lc($l_config{"rst_fid_cache"}) !~ m/^"n"/) { $l_config{"rst_fid_cache"} = "y"; } else { $l_config{"rst_fid_cache"} = "n"; }
}
   
print "\nContinue preparing working directory for ".$l_config{"feed"}." validation?\n\n";
print "WARNING: This will remove the contents of the 'validation' and 'working' sub-directories!\n\n";
print "Continue [y/N]: ";
chomp($l_opt = uc(<STDIN>));
if ($l_opt ne "Y")
{
   print "\nAborted.";
   exit(1);
}

# Create dirs
print "\n";
if (! -d "working") { mkdir "working"; }
if (! -d "validation") { mkdir "validation"; }
`del /Q working\\*.* 2>NUL`;
`del /Q validation\\*.* 2>NUL`;
`del /Q po_validate.bat 2>NUL`;
`del /Q po_report.bat 2>NUL`;
`del /Q po_terminate.bat 2>NUL`;
`del /Q po_pextract.bat 2>NUL`;
`del /Q po_sextract.bat 2>NUL`;
`del /Q validation.cfg 2>NUL`;
`copy %SKitRoot%\\xslt\\*.xsl validation`;

# Common config file
if (! -f "common.cfg") 
{
   open(OUTF, ">common.cfg");
   close(OUTF);
}

# Create validation config
open(OUTF, "> validation.cfg");
foreach my $l_item (keys %l_config) { print OUTF $l_item."=".$l_config{$l_item}."\n"; }
close(OUTF);

# Create generic configuration file
open(OUTF, "> working/".$l_config{"feed"}."_global.cfg");
print OUTF $l_header;
print OUTF "-options common.cfg\n";
print OUTF "-options ".$l_config{"hosts"}."\n";
if ($l_config{"stats_freq"} ne "-") { print OUTF "-stats 4 -stats_freq ".$l_config{"stats_freq"}." -stats_xsl tickrelate_render.xsl\n"; }
print OUTF "-no_sync_st\n";
print OUTF "-compare ".$l_config{"compare"}."\n";
print OUTF "-format ".$l_config{"format"}."\n";
print OUTF "-no_initial_ev\n";
if ($l_config{"gui"} eq "y") { print OUTF "-no_console\n"; }
if ($l_config{"efids"} ne "") { print OUTF "-efids ".$l_config{"efids"}."\n"; }
if ($l_config{"mangle"} ne "") { print OUTF "-mangling ".$l_config{"mangle"}."\n"; }
if ($l_config{"gui"} eq "n") { print OUTF "-no_gui\n"; }
if ($l_config{"rst_fid_cache"} eq "y") { print OUTF "-rst_fid_cache\n"; }
if ($l_config{"upd_hist"} =~ /([0-9]+).*ms/i) { print OUTF "-upd_hist_ms ".$1."\n"; }
elsif ($l_config{"upd_hist"} =~ /([0-9]+)/i) { print OUTF "-upd_hist_cnt ".$1."\n"; }
if ($l_config{"sync_ctx"} =~ /([0-9]+).*ms/i) { print OUTF "-sync_ctx_ms ".$1."\n"; }
elsif ($l_config{"sync_ctx"} =~ /([0-9]+)/i) { print OUTF "-sync_ctx_cnt ".$1."\n"; }
if ($l_config{"drop_sync_ctx"} =~ /([0-9]+).*ms/i) { print OUTF "-drop_sync_ctx_ms ".$1."\n"; }
elsif ($l_config{"drop_sync_ctx"} =~ /([0-9]+)/i) { print OUTF "-drop_sync_ctx_cnt ".$1."\n"; }
if ($l_config{"missed_updates_ctx"} =~ /([0-9]+).*ms/i) { print OUTF "-missed_upd_ctx_ms ".$1."\n"; }
elsif ($l_config{"missed_updates_ctx"} =~ /([0-9]+)/i) { print OUTF "-missed_upd_ctx_cnt ".$1."\n"; }
if ($l_config{"missed_updates"} ne "") { print OUTF "-detect_missed_updates\n"; }
close(OUTF);

# Generate script to kick off the validation
open(SCR, "> po_validate.bat");
print SCR "\@echo off\n";

# Generate script to extract all data from primary and secondary feeds
open(PESCR, "> po_pextract.bat");
open(SESCR, "> po_sextract.bat");

# Process all lric and fields files
print "Scanning for LRIC files:\n\n";
chomp(my @l_lrics = `dir /B *.lric`);
foreach my $l_lric (@l_lrics)
{
   my $l_lfid = $l_lric;
   my $l_ltric = $l_lric;
   my $l_cfg = $l_lric;
   my $l_xml = $l_lric;
   my $l_tee = $l_lric;
   my $l_exp = $l_lric;
   my $l_exs = $l_lric;
   my $l_name = $l_lric;
   $l_name =~ s/\.lric//g;
   $l_lfid =~ s/\.lric/\.fields/;
   $l_ltric =~ s/\.lric/\.rics/;
   $l_cfg =~ s/\.lric/\.cfg/;
   $l_xml =~ s/\.lric/\.xml/;
   $l_tee =~ s/\.lric/\.log/;
   $l_exp =~ s/\.lric/\.primary.dbout/;
   $l_exs =~ s/\.lric/\.secondary.dbout/;
   if (! -f $l_lfid)
   {
      print "\nError: Can't find fields file for $l_lric (expected $l_lfid)\n";
      exit(1);
   }
   else
   {
      print "  Processing '$l_lric'...\n";

      # Create RIC file
      open(INF, $l_lric);
      open(OUTF, "> working/".$l_ltric);
      print OUTF $l_header;
      while (my $l_line = <INF>)
      { 
         if ($l_line !~ m/^\s*\!/ && $l_line !~ m/^KEY=/ && $l_line !~ m/^\s*$/) 
            { print OUTF "-rics $l_line"; }
      }
      close(INF);
      close(OUTF);

      # Create fields file
      open(INF, $l_lfid);
      open(OUTF, "> working/".$l_lfid);
      print OUTF $l_header;
      while (my $l_line = <INF>)
         { if ($l_line !~ m/^\s*\!/) { print OUTF "-fids $l_line"; } }
      close(INF);
      close(OUTF);

      # Create configuration file
      open(OUTF, "> working/".$l_cfg);
      print OUTF $l_header;
      print OUTF "-options ".$l_name."_common.cfg\n";
      print OUTF "-options working/".$l_config{"feed"}."_global.cfg\n";
      print OUTF "-stats_file validation/".$l_xml."\n";
      print OUTF "-tee validation/".$l_tee."\n";
      print OUTF "-options working/".$l_ltric."\n";
      print OUTF "-options working/".$l_lfid."\n";
      print OUTF "-title ".$l_cfg."\n";
      close(OUTF);

      # Create generic config file
      if (! -f $l_name."_common.cfg") 
      {
         open(OUTF, ">".$l_name."_common.cfg");
         close(OUTF);
      }

      # Data extract scripts
      print PESCR "Tick2XML -quiet -dbout -o ".$l_config{"primary"}.".cfg -o working/".$l_ltric." -o working/".$l_lfid." > validation/".$l_exp."\n";
      print SESCR "Tick2XML -quiet -dbout -o ".$l_config{"secondary"}.".cfg -o working/".$l_ltric." -o working/".$l_lfid." > validation/".$l_exs."\n";

      # Script to kick it off
      print SCR "start \"TickRelate: ".$l_cfg."\" /MIN TickRelate -options working\\".$l_cfg."\n";
      print SCR "perl -e \"sleep 5\"\n";
   }
}

close(SCR);
close(PESCR);
close(SESCR);

# Create the po_terminate.bat script
open(OUTF, ">po_terminate.bat");
print OUTF "\@taskkill /IM tickrelate.exe\n";
close(OUTF);

print "\nDone! Now just run 'po_validate.bat' to start the validation process.\n\n - All results will be generated in the validation sub-directory. \n";
print "\n - If you wish to define options common to all validations, edit the common.cfg file in this directory.\n";
print "\n - To perform a static extract of all data use 'po_pextract.bat' and 'po_sextract.bat'.\n";
print "\n   Extract files will be created in the working directory named *.primary.dbout and *.secondary.dbout.\n";
print "\n - To terminate the validation, run 'po_terminate.bat'.\n";
